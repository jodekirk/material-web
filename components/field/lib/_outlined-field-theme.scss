//
// Copyright 2021 Google LLC
// SPDX-License-Identifier: Apache-2.0
//

// stylelint-disable selector-class-pattern --
// Selector '.mdc-*' should only be used in this project.

@use 'sass:color';
@use 'sass:map';
@use '@material/shape/shape';
@use '@material/theme/color-palette';
@use '@material/theme/state';
@use '@material/theme/theme-color';
@use '@material/mwc-../sass/theme';
@use '@material/mwc-../sass/var';
@use './content-theme';
@use './field-theme';
@use './label-theme';

$_selectors: field-theme.$selectors;

$_error-state-content: color.scale(
  theme-color.prop-value(error),
  $blackness: 25%
);

$_base-light-theme: map.merge(
  field-theme.$light-theme,
  content-theme.$light-theme
);
$_base-light-theme: map.merge($_base-light-theme, label-theme.$light-theme);

$light-theme: map.merge(
  $_base-light-theme,
  (
    disabled-outline-color: color-palette.$grey-800,
    disabled-outline-opacity: 0.12,
    error-hover-outline-color: $_error-state-content,
    error-outline-color: theme-color.$error,
    focus-outline-color: theme-color.$primary,
    focus-outline-width: 2px,
    hover-outline-color: color-palette.$grey-900,
    outline-color: color-palette.$grey-600,
    outline-label-padding: 4px,
    outline-width: 1px,
    shape: shape.$small-component-radius,
  )
);

@mixin theme($theme) {
  $theme: theme.create-theme-vars(
    theme.validate-theme($light-theme, $theme),
    outlined-field
  );

  @include theme.emit-theme-vars($theme);
}

@mixin theme-styles($theme) {
  $theme: theme.create-theme-vars(
    theme.validate-theme-styles($light-theme, $theme),
    outlined-field
  );

  @include field-theme.theme-styles($theme);
  @include content-theme.theme-styles($theme);
  @include label-theme.theme-styles($theme);

  @include _container-padding-horizontal(
    map.get($theme, container-padding-horizontal)
  );
  @include _outline-color(
    (
      default: map.get($theme, outline-color),
      disabled: map.get($theme, disabled-outline-color),
      focus: map.get($theme, focus-outline-color),
      hover: map.get($theme, hover-outline-color),
    )
  );
  @include _outline-error-color(
    (
      default: map.get($theme, error-outline-color),
      hover: map.get($theme, error-hover-outline-color),
    )
  );
  @include _outline-label-padding(map.get($theme, outline-label-padding));
  @include _outline-opacity(
    (
      disabled: map.get($theme, disabled-outline-opacity),
    )
  );
  @include _outline-notch-max-width(
    map.get($theme, container-padding-horizontal)
  );
  @include _outline-width(
    (
      default: map.get($theme, outline-width),
      focus: map.get($theme, focus-outline-width),
    )
  );
  @include _shape(map.get($theme, shape));
}

@mixin _container-padding-horizontal($padding) {
  .mdc-field__outline-start,
  .mdc-field__start::before,
  .mdc-field__end::after {
    // Outlined variant start section uses min-width instead of padding since it
    // needs to add start/end padding to add extra space as needed for shape and
    // label padding.
    min-width: $padding;
  }
}

@mixin _outline-label-padding($padding) {
  .mdc-field__outline-start,
  .mdc-field__start::before {
    padding-inline-end: $padding;
  }

  .mdc-field__outline-start::before,
  .mdc-field__outline-start::after {
    margin-inline-end: $padding;
  }

  .mdc-field__outline-notch {
    padding: 0 $padding;
    margin-inline-start: calc(-1 * #{$padding});
    margin-inline-end: $padding;
  }

  .mdc-field__outline-end {
    margin-inline-start: calc(-1 * #{$padding});
  }
}

@mixin _outline-notch-max-width($container-padding-horizontal) {
  .mdc-field__outline-notch {
    max-width: calc(100% - 2 * #{$container-padding-horizontal});
  }
}

@mixin _outline-color($colors) {
  @include state.enabled($_selectors) {
    @include _set-outline-color(state.get-default-state($colors));
  }

  @include state.focus($_selectors) {
    @include _set-outline-color(state.get-focus-state($colors));
  }

  @include state.hover($_selectors) {
    @include _set-outline-color(state.get-hover-state($colors));
  }

  @include state.disabled($_selectors) {
    @include _set-outline-color(state.get-disabled-state($colors));
  }
}

@mixin _set-outline-color($color) {
  .mdc-field__outline {
    border-color: $color;
  }
}

@mixin _outline-error-color($colors) {
  @include state.error($_selectors) {
    @include _outline-color($colors);
  }
}

@mixin _outline-opacity($opacities) {
  @include state.enabled($_selectors) {
    @include _set-outline-inactive-opacity(state.get-default-state($opacities));
  }

  @include state.disabled($_selectors) {
    @include _set-outline-inactive-opacity(
      state.get-disabled-state($opacities)
    );
  }
}

@mixin _set-outline-inactive-opacity($opacity) {
  .mdc-field__outline-start,
  .mdc-field__outline-end,
  .mdc-field__outline-panel-inactive {
    opacity: $opacity;
  }
}

@mixin _outline-width($widths) {
  @include _set-outline-width(state.get-default-state($widths));
  @include _set-outline-focus-width(state.get-focus-state($widths));
}

@mixin _set-outline-width($width) {
  .mdc-field__outline-start::before,
  .mdc-field__outline-end::before,
  .mdc-field__outline-panel-inactive,
  .mdc-field__outline-panel-inactive::before,
  .mdc-field__outline-panel-inactive::after {
    border-width: $width;
  }

  .mdc-field__label--floating {
    // Center the label within the outline stroke
    transform: translateY(calc(-50% + #{$width} / 2));
  }
}

@mixin _set-outline-focus-width($width) {
  .mdc-field__outline-start::after,
  .mdc-field__outline-end::after,
  .mdc-field__outline-panel-active,
  .mdc-field__outline-panel-active::before,
  .mdc-field__outline-panel-active::after {
    border-width: $width;
  }
}

@mixin _shape($shape) {
  .mdc-field__outline {
    border-radius: $shape;
  }

  .mdc-field__outline-start,
  .mdc-field__start::before,
  .mdc-field__end::after {
    padding-inline-start: $shape;
  }
}
